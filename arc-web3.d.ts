/** Declaration file generated by dts-gen */
import {BigNumber} from "bignumber.js"; 

export interface EthereumSyncStatus{
	startingBlock: number;
	currentBlock: number;
	highestBlock: number;
}

export interface TransactionData{
	chainID?: number;
	nonce?: number;
}

export class EthereumABIParseError{
	static name: string;
	static message: string;
	static stack: string;
}

export class EthereumAccount {
	constructor(web3: Web3Connection, address: string);

	balance(blockNumber?: number): Promise<BigNumber>;

	sendTransaction(...args: any[]): void;

	setSenderFor(...args: any[]): void;

	setSignerFor(...args: any[]): void;

	sign(...args: any[]): void;

	toString(...args: any[]): void;

	transfer(...args: any[]): void;

}

export class EthereumAccountKeyring {
	constructor(...args: any[]);

	createAccount(...args: any[]): void;

	destroy(...args: any[]): void;

	seedWords(...args: any[]): void;

}

export class EthereumAccountSignable {
	constructor(...args: any[]);

	discoverChainID(...args: any[]): void;

	sendTransaction(...args: any[]): void;

	sign(...args: any[]): void;

	signTransaction(...args: any[]): void;

	transfer(...args: any[]): void;

	updateNonce(...args: any[]): void;

}

export class EthereumContract {
	constructor(...args: any[]);

	toString(): string;

}

export class EthereumContractFunction {
	constructor(...args: any[]);

	call(...args: any[]): void;

	toString(): string;

}

export class EthereumContractMultiFunction {
	constructor(...args: any[]);

	toString(...args: any[]): void;

}

export class EthereumContractRevertError {
	constructor(...args: any[]);

	static captureStackTrace(p0: any, p1: any): any;

	static stackTraceLimit: number;

}

export class HDKey {
	constructor(versions: any);

	derive(path: any): any;

	deriveChild(index: any): any;

	recover(hash: any, sig: any, recovery: any): any;

	sign(hash: any): any;

	signRecoverable(hash: any): any;

	verify(hash: any, signature: any): any;

	wipePrivateData(): any;

	static HARDENED_OFFSET: number;

	static fromMasterSeed(seedBuffer: any, versions: any): any;

}

export class Web3APIError {
	constructor(...args: any[]);

	static captureStackTrace(p0: any, p1: any): any;

	static stackTraceLimit: number;

}

export class Web3Connection {
	constructor(...args: any[]);

	blockNumber(args: any): any;

	call(args: any): any;

	clientVersion(args: any): any;

	closeConnection(...args: any[]): void;

	coinbase(args: any): any;

	estimateGas(args: any): any;

	gasPrice(args: any): any;

	getBalance(args: any): any;

	getBlock(...args: any[]): void;

	getBlockByHash(args: any): any;

	getBlockByNumber(args: any): any;

	getBlockTransactionCount(...args: any[]): void;

	getBlockTransactionCountByHash(args: any): any;

	getBlockTransactionCountByNumber(args: any): any;

	getCode(args: any): any;

	getFilterChanges(args: any): any;

	getFilterLogs(args: any): any;

	getLogs(args: any): any;

	getStorageAt(args: any): any;

	getTransaction(...args: any[]): void;

	getTransactionByBlockHashAndIndex(args: any): any;

	getTransactionByBlockNumberAndIndex(args: any): any;

	getTransactionByHash(args: any): any;

	getTransactionCount(args: any): any;

	getTransactionReceipt(args: any): any;

	getUncle(...args: any[]): void;

	getUncleByBlockHashAndIndex(args: any): any;

	getUncleByBlockNumberAndIndex(args: any): any;

	getUncleCount(...args: any[]): void;

	getUncleCountByBlockHash(args: any): any;

	getUncleCountByBlockNumber(args: any): any;

	getWork(args: any): any;

	hashrate(args: any): any;

	ignoreTransactionConfirmed(...args: any[]): void;

	isMining(args: any): any;

	isSyncing(args: any): any;

	keccak256(args: any): any;

	listen(...args: any[]): void;

	networkID(args: any): any;

	networkListening(args: any): any;

	networkPeerCount(args: any): any;

	newBlockFilter(args: any): any;

	newFilter(args: any): any;

	newPendingTransactionFilter(args: any): any;

	protocolVersion(args: any): any;

	sendRawTransaction(args: any): any;

	submitHashrate(args: any): any;

	submitWork(args: any): any;

	switchTransactionConfirmed(...args: any[]): void;

	transactionConfirmed(...args: any[]): void;

	uninstallFilter(args: any): any;

	unlisten(...args: any[]): void;

}

export class Web3ConnectionError {
	constructor(...args: any[]);

	static captureStackTrace(p0: any, p1: any): any;

	static stackTraceLimit: number;

}

export function EthereumContractResult(...args: any[]): void;

export function InitializeWeb3(): any;

export namespace bip39 {
	const wordlists: {
		EN: string[];
		JA: string[];
		chinese_simplified: string[];
		chinese_traditional: string[];
		english: string[];
		french: string[];
		italian: string[];
		japanese: string[];
		korean: string[];
		spanish: string[];
	};
	function entropyToMnemonic(entropy: any, wordlist: any): any;

	function generateMnemonic(strength: any, rng: any, wordlist: any): any;

	function initializeBip39(s: any, p: any): void;

	function mnemonicToEntropy(mnemonic: any, wordlist: any): any;

	function mnemonicToSeed(mnemonic: any, password: any): any;

	function mnemonicToSeedHex(mnemonic: any, password: any): any;

	function validateMnemonic(mnemonic: any, wordlist: any): any;
}

export namespace rlp {
	function decode(input: any, stream: any): any;

	function encode(input: any): any;

	function getLength(input: any): any;
}

export namespace util {
	function decodeABI(args: any, abiSnippet: any, selectorHash: any): any;
	
	function encodeABI(hexStr: any, abiSnippet: any): any;

	function isValidAddress(address: any, lenient: any): any;

	function toChecksumAddress(address: any, internal: any): any;
}

